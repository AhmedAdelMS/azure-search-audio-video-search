<?xml version="1.0" encoding="utf-8"?>
<tt xml:lang="en-us" xmlns="http://www.w3.org/ns/ttml" xmlns:tts="http://www.w3.org/ns/ttml#styling" xmlns:ttm="http://www.w3.org/ns/ttml#metadata">
  <head>
    <metadata>
      <ttm:title>Media.wvx.aib</ttm:title>
      <ttm:copyright>Copyright (c) 2013 Microsoft Corporation.  All rights reserved.</ttm:copyright>
    </metadata>
    <styling>
      <style xml:id="Style1" tts:fontFamily="proportionalSansSerif" tts:fontSize="0.8c" tts:textAlign="center" tts:color="white" />
    </styling>
    <layout>
      <region style="Style1" xml:id="CaptionArea" tts:origin="0c 12.6c" tts:extent="32c 2.4c" tts:backgroundColor="rgba(0,0,0,160)" tts:displayAlign="center" tts:padding="0.3c 0.5c" />
    </layout>
    <recognizability>0.913</recognizability>
  </head>
  <body region="CaptionArea">
    <div>
      <p begin="00:00:03.910" end="00:00:08.690">All right well everyone and this is what's new in javascript</p>
      <p begin="00:00:08.690" end="00:00:13.590">for fast and scalable applications my name is brian troublesome</p>
      <p begin="00:00:13.590" end="00:00:18.360">in a program manager at microsoft work on the</p>
      <p begin="00:00:18.360" end="00:00:21.290">...javascript engine which is the javascript engine that</p>
      <p begin="00:00:21.290" end="00:00:25.810">power's microsoft edge as well as your windows applications...html</p>
      <p begin="00:00:25.810" end="00:00:31.910">and javascript...tweet occasionally you can follow me there and do stuff and get hub</p>
      <p begin="00:00:31.910" end="00:00:34.750">...watch that as well and certainly feel free to email</p>
      <p begin="00:00:34.750" end="00:00:41.820">me if you have questions later about any of the content here?</p>
      <p begin="00:00:41.820" end="00:00:46.480">So, today me to go over some of the new stuff that's coming to ecma</p>
      <p begin="00:00:46.480" end="00:00:50.410">script six that's the new version of javascript the latest</p>
      <p begin="00:00:50.410" end="00:00:55.040">a standard it's not quite ratified yet but it's coming</p>
      <p begin="00:00:55.040" end="00:00:59.570">and then I'll do a deep dive into the some advanced a</p>
      <p begin="00:00:59.570" end="00:01:04.670">sync programming patterns using these new...six features namely</p>
      <p begin="00:01:04.670" end="00:01:09.170">...promises iterate errors and generators and,</p>
      <p begin="00:01:09.170" end="00:01:13.550">then switch gears and talk about some new stuff that's coming to</p>
      <p begin="00:01:13.550" end="00:01:18.840">javascript some upcoming stuff that were partnering with</p>
      <p begin="00:01:18.840" end="00:01:26.890">...working withmissoula and intel to deliver on talk about that or towards the end.</p>
      <p begin="00:01:26.890" end="00:01:31.770">yes, six at transcript six recently renamed to</p>
      <p begin="00:01:31.770" end="00:01:36.700">...script twenty fifteen so if you're seeing us twenty fifteen out there it's same thing</p>
      <p begin="00:01:36.700" end="00:01:42.490">...it's done it's been in progress for six years now I guess and</p>
      <p begin="00:01:42.490" end="00:01:46.770">it's finally, finally complete and depending on how you measure</p>
      <p begin="00:01:46.770" end="00:01:51.240">it's perhaps the largest update to javascript its history the...spec</p>
      <p begin="00:01:51.240" end="00:01:56.800">...just balloon in size it's just massive and, we're doing the committee was</p>
      <p begin="00:01:56.800" end="00:02:00.580">working hard for those six years, you know, it's there's a lot of lot</p>
      <p begin="00:02:00.580" end="00:02:04.390">...new stuff in it going forward though if you take a look at this</p>
      <p begin="00:02:04.390" end="00:02:10.680">little graphic here future updates to ecma...going to be much smaller and,</p>
      <p begin="00:02:10.680" end="00:02:15.390">that's because the committee is moving to train models so that was the rationale behind renaming</p>
      <p begin="00:02:15.390" end="00:02:18.300">...sixty ftwenty fifteen is that there's going to be</p>
      <p begin="00:02:18.300" end="00:02:22.400">an twenty sixteen and twenty seventeen and twenty eighteen hopefully</p>
      <p begin="00:02:22.400" end="00:02:29.040">twenty two hundred, you know, out into the future.</p>
      <p begin="00:02:29.040" end="00:02:33.400">So, that's super exciting networks really nice with edges</p>
      <p begin="00:02:33.400" end="00:02:39.850">sort of planmicrosoft edges plan to be evergreen so,...is will be</p>
      <p begin="00:02:39.850" end="00:02:45.930">...you...language features much more rapidly.</p>
      <p begin="00:02:45.930" end="00:02:51.190">...scripts kind of unique it comes with a test suite as well it's actually</p>
      <p begin="00:02:51.190" end="00:02:56.980">a language...within official test suite that's owned by the standards body and, the</p>
      <p begin="00:02:56.980" end="00:03:01.100">cool thing about it is you can you can help so yes,</p>
      <p begin="00:03:01.100" end="00:03:05.730">six coverages coming it's not all...yet there's a lot of people that are working to get the</p>
      <p begin="00:03:05.730" end="00:03:09.920">fsix coverage there if that's something you're interested in helping out with there's,</p>
      <p begin="00:03:09.920" end="00:03:15.140">there's a lot of opportunities to dive...learn about...six stuff that way and certainly</p>
      <p begin="00:03:15.140" end="00:03:20.100">if you find any bugs in this yes six in any of the sixty...today or any of</p>
      <p begin="00:03:20.100" end="00:03:26.960">that you're trying all of the implementers run this test suite so it's a great way to.</p>
      <p begin="00:03:26.960" end="00:03:29.320">To get those bugs fixed.</p>
      <p begin="00:03:29.320" end="00:03:35.640">Incidentally the slides...notice...not using powerpoint amusing edge this is.</p>
      <p begin="00:03:35.640" end="00:03:40.030">Written using all the...six...could consider my side somewhat of</p>
      <p begin="00:03:40.030" end="00:03:46.190">a demo as well little bit fancier than...you'll see.</p>
      <p begin="00:03:46.190" end="00:03:51.900">So, microsoft edge...the six ...has been working hard on</p>
      <p begin="00:03:51.900" end="00:03:57.000">the building out as much of this functionality as we can and,</p>
      <p begin="00:03:57.000" end="00:04:01.750">as a result we actually have the highest score among browsers on the fsix</p>
      <p begin="00:04:01.750" end="00:04:06.950">compatible and can't see the numbers but I think we have about eighty one percent yes</p>
      <p begin="00:04:06.950" end="00:04:13.100">six compatibility ish so, we've just made a ton of progress</p>
      <p begin="00:04:13.100" end="00:04:19.599">and what that means is actually most of the six you can use in microsoft edge today but,</p>
      <p begin="00:04:19.599" end="00:04:23.309">we're not actually just sort of chasing this</p>
      <p begin="00:04:23.309" end="00:04:26.429">golden one hundred-percent we're doing</p>
      <p begin="00:04:26.429" end="00:04:30.859">what I would term more interoperability driven standards developments</p>
      <p begin="00:04:30.859" end="00:04:36.029">where actually being really careful and deliberate with implementing these new features to make</p>
      <p begin="00:04:36.029" end="00:04:40.059">sure that we don't break the web breaker code introduce</p>
      <p begin="00:04:40.059" end="00:04:45.769">new differences between browsers they have to worry about and that kind of stuff and,</p>
      <p begin="00:04:45.769" end="00:04:49.029">what that might mean is in some cases we take a lot of data that to the</p>
      <p begin="00:04:49.029" end="00:04:54.009">...and say hey we actually can't implementssay arrayed on prototype</p>
      <p begin="00:04:54.009" end="00:05:00.259">...the contains a because that breaks the web and, that was actually real case</p>
      <p begin="00:05:00.259" end="00:05:05.519">...a breaks and older versions of new tools...so we had to while neck case the</p>
      <p begin="00:05:05.519" end="00:05:10.049">fixes just...includes and it turned out that works but basically</p>
      <p begin="00:05:10.049" end="00:05:15.149">...being deliberate here and making sure that we can give you all these nice</p>
      <p begin="00:05:15.149" end="00:05:21.750">new features without also causing pain another in other areas?</p>
      <p begin="00:05:21.750" end="00:05:28.010">And, not just working on the current standard the fsix...also looking towards the future so, there's as</p>
      <p begin="00:05:28.010" end="00:05:32.950">...js that you can turn on in microsoft...right now in about</p>
      <p begin="00:05:32.950" end="00:05:38.220">...seemed is coming through soon I'll talk about those towards the end</p>
      <p begin="00:05:38.220" end="00:05:42.300">...that doesn't make sense yet.</p>
      <p begin="00:05:42.300" end="00:05:48.770">All right so how many people are using any fsix it on your programs right now?</p>
      <p begin="00:05:48.770" end="00:05:52.790">Not too many maybe you just actually handful how many people using promises</p>
      <p begin="00:05:52.790" end="00:05:58.940">whether nj query or ok good that's a that's a much larger number.</p>
      <p begin="00:05:58.940" end="00:06:00.000">So, yes, six</p>
      <p begin="00:06:01.450" end="00:06:06.220">plus asic programming is awesome and that's and that's for a few reasons</p>
      <p begin="00:06:07.510" end="00:06:12.600">...functions are greatpromises are built...language now so you don't need a</p>
      <p begin="00:06:12.600" end="00:06:16.550">library to use promises anymore and iterated...</p>
      <p begin="00:06:16.550" end="00:06:23.100">generators to combine to make some really awesome patterns social you step-by-step how that works.</p>
      <p begin="00:06:23.100" end="00:06:27.120">So, era functions are new function syntax added to javascript...a new</p>
      <p begin="00:06:27.120" end="00:06:31.300">...to make functions but the nice part about era functions is that they're super</p>
      <p begin="00:06:31.300" end="00:06:34.840">...there's just an arrow I'll show you what it looks like this</p>
      <p begin="00:06:34.840" end="00:06:39.180">just super small always anonymous so terse is actually no way to give</p>
      <p begin="00:06:39.180" end="00:06:42.840">...a name course you can assign it to a variable but,</p>
      <p begin="00:06:42.840" end="00:06:47.650">one of the most useful aspects of...functions is that this and</p>
      <p begin="00:06:47.650" end="00:06:52.580">arguments and super inside of that era function is the exact same as it is outside of the</p>
      <p begin="00:06:52.580" end="00:06:58.650">...function so the...function doesn't change the value of thisit just uses</p>
      <p begin="00:06:58.650" end="00:07:03.370">...outside so, no, more aliasing this to the apps</p>
      <p begin="00:07:03.370" end="00:07:11.900">...self or whatever so, let's look at that looks like.</p>
      <p begin="00:07:11.900" end="00:07:17.120">And, I want to some I want multiply each element of this array and,</p>
      <p begin="00:07:17.120" end="00:07:23.040">multiply by multiply by two and some so, let's update this to use</p>
      <p begin="00:07:23.040" end="00:07:30.380">era function second show you just how awesome...functions are.</p>
      <p begin="00:07:30.380" end="00:07:39.740">...save the old codes we can compare more directly.</p>
      <p begin="00:07:39.740" end="00:07:44.350">All right so actually let's start with this codes can just</p>
      <p begin="00:07:44.350" end="00:07:50.100">edited on-the-fly so, the first...functions you don't need the function</p>
      <p begin="00:07:50.100" end="00:07:55.980">...get rid of it to me letters you also don't need the parens around</p>
      <p begin="00:07:55.980" end="00:08:01.020">arguments list if you only have one arguments you don't you don't in the parens if zero or to</p>
      <p begin="00:08:01.020" end="00:08:06.360">...still needed but with just one you don't and,</p>
      <p begin="00:08:06.360" end="00:08:12.460">now comes the only boiler plate with error functions the nice equals greater than?</p>
      <p begin="00:08:12.460" end="00:08:16.640">And, now for...function body if you just have one expression in</p>
      <p begin="00:08:16.640" end="00:08:20.070">their body and you don't need to and,</p>
      <p begin="00:08:20.070" end="00:08:24.810">you want to return it you can actually just get rid of the braces and get rid of the return and</p>
      <p begin="00:08:24.810" end="00:08:26.950">I'll actually just return the value of that expression</p>
      <p begin="00:08:26.950" end="00:08:31.130">for you so this is the exact same as this</p>
      <p begin="00:08:31.130" end="00:08:37.070">with substantially fewer characters and it's just much easier to read.</p>
      <p begin="00:08:37.070" end="00:08:42.430">We can do the same thing here that we have to parameters we do need to keep the parens</p>
      <p begin="00:08:42.430" end="00:08:48.270">but followings similar process.</p>
      <p begin="00:08:48.270" end="00:08:52.800">We end up tests and if we run it in the proper result...with error</p>
      <p begin="00:08:52.800" end="00:08:58.550">functions you spend a lot less time just writing the function keyword for one</p>
      <p begin="00:08:58.550" end="00:09:06.510">thing but it's also just syntactically a lot nicer to read and to...maintain.</p>
      <p begin="00:09:06.510" end="00:09:12.820">So, let's look at a case where you want to do something sort of asynchronous.</p>
      <p begin="00:09:12.820" end="00:09:17.050">So, here we have a dog object and we want to</p>
      <p begin="00:09:17.050" end="00:09:21.620">the dog object can bark but, you can also bark later and we do this via set</p>
      <p begin="00:09:21.620" end="00:09:25.340">time-out and after this call back we call</p>
      <p begin="00:09:25.340" end="00:09:28.260">bark on the this object so...run this</p>
      <p begin="00:09:28.260" end="00:09:33.570">...works fine second later he works smart dog but,</p>
      <p begin="00:09:34.960" end="00:09:38.440">...have this sort of underscore this nonsense...nice</p>
      <p begin="00:09:38.440" end="00:09:45.670">get rid of that so let's do their similar processing clean it up so we have.</p>
      <p begin="00:09:45.670" end="00:09:49.860">We have zero are arguments are parameters so we do need to have the</p>
      <p begin="00:09:49.860" end="00:09:51.900">prince there but we can get rid of the braces?</p>
      <p begin="00:09:53.000" end="00:09:56.860">Can move this?</p>
      <p begin="00:09:56.860" end="00:10:01.100">Ok, so, this point this works this works fine but,</p>
      <p begin="00:10:01.100" end="00:10:04.900">we can even go a step further and realize that because this inside of this era function</p>
      <p begin="00:10:04.900" end="00:10:09.450">here's the same as it is outside this aliasing we don't even need anymore so</p>
      <p begin="00:10:09.450" end="00:10:12.850">we can just get rid of this completely ans delete</p>
      <p begin="00:10:12.850" end="00:10:17.640">the underscore and it just works there so there's no more underscore this</p>
      <p begin="00:10:17.640" end="00:10:19.750">self aliasing nonsense</p>
      <p begin="00:10:19.750" end="00:10:24.880">...just plain works so this is just super potent</p>
      <p begin="00:10:24.880" end="00:10:29.950">for asynchronous code where you really need this to stay the same</p>
      <p begin="00:10:29.950" end="00:10:35.770">...can call methods on your on your object after some asynchronous task is...</p>
      <p begin="00:10:35.770" end="00:10:41.700">...are the same way so, in this example you know, this argument's object</p>
      <p begin="00:10:41.700" end="00:10:48.010">here is going to be the arguments to this test function and not the</p>
      <p begin="00:10:48.010" end="00:10:53.600">argument's to get...so it's going to be two arguments here instead of zero...run it would</p>
      <p begin="00:10:53.600" end="00:10:57.640">you see that is the case.</p>
      <p begin="00:10:57.640" end="00:11:01.960">Seo functions can actually have bodies they can have blocks that's fine but,</p>
      <p begin="00:11:01.960" end="00:11:06.910">not that when I run this guy get undefined and that's because when you do use the block with</p>
      <p begin="00:11:06.910" end="00:11:08.640">the...function then you do</p>
      <p begin="00:11:08.640" end="00:11:13.670">need the explicit return it won't it won't automatically return the last</p>
      <p begin="00:11:13.670" end="00:11:20.540">statement for you so with that it works.</p>
      <p begin="00:11:20.540" end="00:11:23.090">So, here's an interesting case.</p>
      <p begin="00:11:23.090" end="00:11:27.560">Have a function called...and, I just want to log the result of</p>
      <p begin="00:11:27.560" end="00:11:35.930">it so I just want to see...by show of hands how many people think I'm...some kind of object right now?</p>
      <p begin="00:11:35.930" end="00:11:40.090">And, how many people think...something else like say</p>
      <p begin="00:11:40.090" end="00:11:44.900">undefined or null or something crazy?</p>
      <p begin="00:11:44.900" end="00:11:50.970">And, the naming should give you...a little bit of a clue but...fifty so,</p>
      <p begin="00:11:50.970" end="00:11:56.920">this is actually...undefined and that's because these curly braces...</p>
      <p begin="00:11:56.920" end="00:12:01.460">blocks they are not is not an object even though it looks exactly like an object</p>
      <p begin="00:12:01.460" end="00:12:06.150">is the block with a labeled statement and there's no return in here so it</p>
      <p begin="00:12:06.150" end="00:12:13.260">just returns undefined this is a gotcha...you I promise you can put.</p>
      <p begin="00:12:13.260" end="00:12:16.280">Return in there and you can see it returns brian so,</p>
      <p begin="00:12:16.280" end="00:12:19.320">the fix this just know that when you returning an object</p>
      <p begin="00:12:19.320" end="00:12:39.820">it with the implicit returnof the...function just...parens.</p>
      <p begin="00:12:39.820" end="00:12:43.030">So, era functions really it really helpful with your</p>
      <p begin="00:12:43.030" end="00:12:47.950">in a synchronous code a c code is sort of the hallmark basing code is just tons and</p>
      <p begin="00:12:47.950" end="00:12:56.930">tons and tons of function call back so air functions...help with them.</p>
      <p begin="00:12:56.930" end="00:13:02.690">Another big help for is encode is promises I know a lot of you are already using promises for</p>
      <p begin="00:13:02.690" end="00:13:04.870">the that those that aren't just one explain</p>
      <p begin="00:13:04.870" end="00:13:10.640">them briefly and hopefully demonstrate how helpful they can be for your</p>
      <p begin="00:13:10.640" end="00:13:15.350">...encode so conceptual model of a promises it's an object that the</p>
      <p begin="00:13:15.350" end="00:13:19.520">produces that a producer of some asynchronous value will give the consumer</p>
      <p begin="00:13:19.520" end="00:13:24.450">and that object represents and the future value so,</p>
      <p begin="00:13:24.450" end="00:13:29.950">promises like a single value that just hasn't been fulfilled the promise for value so,</p>
      <p begin="00:13:29.950" end="00:13:32.410">producer when it needs to produce some kind of</p>
      <p begin="00:13:32.410" end="00:13:35.260">asynchronous value rather than taking a call back</p>
      <p begin="00:13:35.260" end="00:13:40.180">that we'll call it some later point in time returns a promise and the producers</p>
      <p begin="00:13:40.180" end="00:13:44.820">also holding some resolve and reject functions that can use to fulfill</p>
      <p begin="00:13:44.820" end="00:13:51.210">the promise with some kind of value or reject the promise with some kind of error?</p>
      <p begin="00:13:51.210" end="00:13:55.750">And, then...the consumer side when you call in asynchronous api you get out</p>
      <p begin="00:13:55.750" end="00:14:00.960">of promise and...can listen for when the producer calls this when the producer</p>
      <p begin="00:14:00.960" end="00:14:06.260">fulfills...rejects by using the...in the...catch methods?</p>
      <p begin="00:14:06.260" end="00:14:11.080">The promise has three states...is born into the world pending and,</p>
      <p begin="00:14:11.080" end="00:14:14.570">then once the producer decides...has a value for the promise that will</p>
      <p begin="00:14:14.570" end="00:14:20.190">...or maybe some error occurred or reject it and,</p>
      <p begin="00:14:20.190" end="00:14:24.300">once it enters ...rejected it will never change and,</p>
      <p begin="00:14:24.300" end="00:14:29.440">that's really nice becauseif a promises resolved and it's just sitting out thereyou</p>
      <p begin="00:14:29.440" end="00:14:32.750">can come by later at any point later in your program attaches</p>
      <p begin="00:14:32.750" end="00:14:37.250">...handler and get immediately called with the value of</p>
      <p begin="00:14:37.250" end="00:14:43.610">that promise so let's look at some examples of using promises so here we have the</p>
      <p begin="00:14:43.610" end="00:14:46.900">sort of producer and this producers going to produce a</p>
      <p begin="00:14:46.900" end="00:14:52.580">value of undefined after some amount of time so we do that by returning</p>
      <p begin="00:14:52.580" end="00:14:57.330">a new promise and notice that the promise constructor takes a function</p>
      <p begin="00:14:57.330" end="00:15:01.100">...kinda weird it's called the revealing constructor</p>
      <p begin="00:15:01.100" end="00:15:04.920">...basically this constructors going to call this call</p>
      <p begin="00:15:04.920" end="00:15:14.130">back immediately with resolve and also reject which I'm not using in this case.</p>
      <p begin="00:15:14.130" end="00:15:18.620">But, so, you get called back and.</p>
      <p begin="00:15:18.620" end="00:15:22.430">So, we're just going to set timeout and.</p>
      <p begin="00:15:22.430" end="00:15:30.890">We're going to resolve that promise after some number of milliseconds.</p>
      <p begin="00:15:30.890" end="00:15:33.330">So, the.</p>
      <p begin="00:15:33.330" end="00:15:42.530">The other on the consumer side of the promise.</p>
      <p begin="00:15:42.530" end="00:16:06.440">Moi edges and starting...</p>
      <p begin="00:16:06.440" end="00:16:12.950">...now this is where this is never happen in any of the any of the dry runs.</p>
      <p begin="00:16:12.950" end="00:16:22.060">Very impressed actually don't know why it it's not letting me actually restarted.</p>
      <p begin="00:16:22.060" end="00:16:25.370">Probably because I need to remove these hung processes.</p>
      <p begin="00:16:26.710" end="00:16:30.370">I suspect on security is that will work.</p>
      <p begin="00:16:30.370" end="00:16:31.960">So, let's see.</p>
      <p begin="00:16:31.960" end="00:16:42.220">Excellent.</p>
      <p begin="00:16:42.220" end="00:16:43.470">Search zoom back.</p>
      <p begin="00:16:44.910" end="00:16:51.610">And, remember that's nice.</p>
      <p begin="00:16:51.610" end="00:16:57.140">Okay, so, remember that this is the producer up here so,</p>
      <p begin="00:16:57.140" end="00:17:01.320">on the consumer side rather than passing a call back to this time-out</p>
      <p begin="00:17:05.400" end="00:17:09.510">We just get a promise back and then we use this dot then method to</p>
      <p begin="00:17:09.510" end="00:17:14.460">listen for when the promise resolves so if you run this guy and we see...in a second</p>
      <p begin="00:17:14.460" end="00:17:19.790">letter we see and because the producer results the promise after...so we can create numerous</p>
      <p begin="00:17:19.790" end="00:17:24.840">of these promises and they all just sort of play together nicely.</p>
      <p begin="00:17:24.840" end="00:17:29.050">So, let's do something real here we have some code</p>
      <p begin="00:17:29.050" end="00:17:35.510">...wrapper around xml http requests get and,</p>
      <p begin="00:17:35.510" end="00:17:40.560">then we want to use it to get the top posts from...called x</p>
      <p begin="00:17:40.560" end="00:17:47.150">...let's change to use promises so first thing you don't need to use the call back we can delete that.</p>
      <p begin="00:17:47.150" end="00:17:52.150">And, when or producer and we want to produce some kind of asynchronous value the first thing that we usually want to</p>
      <p begin="00:17:52.150" end="00:17:53.290">use return you promise?</p>
      <p begin="00:17:54.360" end="00:17:57.240">And, this gets resolved interject functions.</p>
      <p begin="00:17:58.520" end="00:18:11.750">Just kind of boiler plate they get really good at typing.</p>
      <p begin="00:18:11.750" end="00:18:14.730">Ok, so, now than rather than calling this</p>
      <p begin="00:18:14.730" end="00:18:18.720">...back which we don't have anymore we're going to call the result function we</p>
      <p begin="00:18:18.720" end="00:18:23.120">have a successful result and we don't need to pass</p>
      <p begin="00:18:23.120" end="00:18:28.390">the error value we just don't say anything about the error because there was no error</p>
      <p begin="00:18:28.390" end="00:18:32.210">that's really nice part about promises likewise when we</p>
      <p begin="00:18:32.210" end="00:18:36.390">rejects we just say hey we have an error we don't need to tell anything about</p>
      <p begin="00:18:36.390" end="00:18:42.880">what the value is like in this case as providing known we can just get rid of it.</p>
      <p begin="00:18:42.880" end="00:18:47.880">that's...producer sites actually pretty quick to convert to promises...the producer side.</p>
      <p begin="00:18:47.880" end="00:18:50.680">So,...consumer side rather than passing a call back which is</p>
      <p begin="00:18:50.680" end="00:18:55.050">called the function and we get a promise we can call...than on it and here we</p>
      <p begin="00:18:55.050" end="00:19:01.160">don't even worry about error handling because then is only going to be called if there was an error?</p>
      <p begin="00:19:01.160" end="00:19:03.770">So, we can just put this.</p>
      <p begin="00:19:03.770" end="00:19:05.870">...success</p>
      <p begin="00:19:05.870" end="00:19:14.550">the result right in there and then for error handling we can use...pretty straightforward.</p>
      <p begin="00:19:14.550" end="00:19:17.800">...the...message.</p>
      <p begin="00:19:17.800" end="00:19:21.650">So, now I've got pretty much the same exact code</p>
      <p begin="00:19:21.650" end="00:19:25.050">...had before but instead using promises so you can run it so you</p>
      <p begin="00:19:25.050" end="00:19:29.480">get the top the top posts from reddit now the cool thing about this</p>
      <p begin="00:19:29.480" end="00:19:35.930">is like say I wanted to get the top posts from the javascript separate well that</p>
      <p begin="00:19:35.930" end="00:19:42.020">...link is wrong...clearly I mean...to do that but, also is an</p>
      <p begin="00:19:42.020" end="00:19:45.170">...advantage over the call back code say</p>
      <p begin="00:19:45.170" end="00:19:52.640">like I got some malformed json back from the server and I ran it.</p>
      <p begin="00:19:52.640" end="00:19:57.450">I can actually catch that error to says see the error has actually popped</p>
      <p begin="00:19:57.450" end="00:20:02.140">out of this than and propagated down the chain until it found a cache so that's one of the really,</p>
      <p begin="00:20:02.140" end="00:20:06.990">really useful aspects of promises that errors in values...sort of propagate down the promise</p>
      <p begin="00:20:06.990" end="00:20:12.790">chain in a...the synchronous imperative kind of way.</p>
      <p begin="00:20:12.790" end="00:20:15.700">So, here's a more complex example same get</p>
      <p begin="00:20:15.700" end="00:20:20.960">helpers before but this time what I want to do is I want to get the top posts from the javascript</p>
      <p begin="00:20:20.960" end="00:20:26.080">separate and then I want to get the top comment from that post.</p>
      <p begin="00:20:26.080" end="00:20:31.580">So, when you're doing this with...echoed a lot of times the end up having to nest to nest</p>
      <p begin="00:20:31.580" end="00:20:36.260">your call backs together and you just end up using up all kinds of horizontal</p>
      <p begin="00:20:36.260" end="00:20:40.010">...space and your program ends with like fifty million</p>
      <p begin="00:20:40.010" end="00:20:44.160">of these guys and I know we've all seen programs that do this</p>
      <p begin="00:20:44.160" end="00:20:47.810">...like...we don't it's</p>
      <p begin="00:20:47.810" end="00:20:53.230">been nice to avoid all of that and promises have a really cool feature that lets you do that and,</p>
      <p begin="00:20:53.230" end="00:20:54.830">it's one of the being reasons why using</p>
      <p begin="00:20:54.830" end="00:21:00.220">promises awesome so this code works like this code is fine I can inside of this</p>
      <p begin="00:21:00.220" end="00:21:05.150">outer then handler I can create new promises and do more stuff that's fine but it</p>
      <p begin="00:21:05.150" end="00:21:10.670">actually works out better if we return the promise from the from...handler?</p>
      <p begin="00:21:10.670" end="00:21:15.950">...that does is it says hey any change promises.</p>
      <p begin="00:21:15.950" end="00:21:18.370">Any chained then.</p>
      <p begin="00:21:18.370" end="00:21:22.010">The value that promise resolves to that is the value of this</p>
      <p begin="00:21:22.010" end="00:21:24.660">...parameter here.</p>
      <p begin="00:21:24.660" end="00:21:28.380">Will be whatever this promise resolves to here?</p>
      <p begin="00:21:28.380" end="00:21:30.700">So, using this.</p>
      <p begin="00:21:30.700" end="00:21:36.250">You can just chain all of your operations together and you don't need to use up any</p>
      <p begin="00:21:36.250" end="00:21:38.900">intense space or anything like that it just</p>
      <p begin="00:21:38.900" end="00:21:45.010">more less works so errors work the same way they just propagate down.</p>
      <p begin="00:21:45.010" end="00:21:51.620">Propagate down the...we could handle errors once.</p>
      <p begin="00:21:51.620" end="00:21:54.230">And, this will handle any errors that occur in the network</p>
      <p begin="00:21:54.230" end="00:21:59.220">request from get any errors that occur pulling out data from</p>
      <p begin="00:21:59.220" end="00:22:03.600">the json any errors that occur in a second like all of this all of this is handled</p>
      <p begin="00:22:03.600" end="00:22:12.040">by the single dot catch that's just a huge improvement over call that code.</p>
      <p begin="00:22:12.040" end="00:22:16.900">So, as I mentioned promises are now part of the platform you don't need you don't need a</p>
      <p begin="00:22:16.900" end="00:22:21.940">librarian to get to take advantage of some of these really nice code improvements that you</p>
      <p begin="00:22:21.940" end="00:22:25.970">get from promises but if...already using a library or you prefer to use a</p>
      <p begin="00:22:25.970" end="00:22:30.460">library because they come with the vast number of helpers and control flow tools and that kind of</p>
      <p begin="00:22:30.460" end="00:22:33.100">thing you can do that actually</p>
      <p begin="00:22:33.100" end="00:22:38.410">the built-in promises the standard fsix promises will interoperate with</p>
      <p begin="00:22:38.410" end="00:22:43.290">...promise libraries without issues so you can return a j query promise from</p>
      <p begin="00:22:43.290" end="00:22:47.820">...handler standard promise or vice versa and that's just going to work for you and,</p>
      <p begin="00:22:47.820" end="00:22:51.360">that's really important is libraries actually will have their own</p>
      <p begin="00:22:51.360" end="00:22:55.510">promised dependencies and sometimes you can end up with three or four different types of promises</p>
      <p begin="00:22:55.510" end="00:23:00.090">in your program that work that's fine.</p>
      <p begin="00:23:00.090" end="00:23:01.410">But, I think one of the most</p>
      <p begin="00:23:01.410" end="00:23:08.660">in the awesome reasons why promises being in the platform is great is that don api</p>
      <p begin="00:23:08.660" end="00:23:13.420">...return promises so no more are done api is going to be taken call backs for</p>
      <p begin="00:23:13.420" end="00:23:18.620">...stuff, for example, web crypto is new api for doing cryptography</p>
      <p begin="00:23:18.620" end="00:23:22.850">...the stuff they returns you promises rather than taking</p>
      <p begin="00:23:22.850" end="00:23:27.200">...likewise the new service worker spec the fetch api is kind</p>
      <p begin="00:23:27.200" end="00:23:31.940">of like a x hr request but it returns promises rather than taking this crazy call</p>
      <p begin="00:23:31.940" end="00:23:36.110">that thing so promises being part of the platform means if</p>
      <p begin="00:23:36.110" end="00:23:42.330">your code is using promises you just don't hardly have to do any work everything...sort of place together.</p>
      <p begin="00:23:42.330" end="00:23:47.440">...another nice reason is once things get built-in browser vendors will start to get better at</p>
      <p begin="00:23:47.440" end="00:23:55.450">tooling and performance answer expect those to improve in the future as well.</p>
      <p begin="00:23:55.450" end="00:24:01.020">All right so the next thing I want to talk about is integrator is innovators are step along the way to generators...talk about</p>
      <p begin="00:24:01.020" end="00:24:03.650">...first.</p>
      <p begin="00:24:03.650" end="00:24:08.980">Innovators in javascript ...conceptually the same as they are in any other language might be useful</p>
      <p begin="00:24:08.980" end="00:24:13.190">it's just a protocol for a consumer to pull multiple values synchronous</p>
      <p begin="00:24:13.190" end="00:24:17.570">...from a producer.</p>
      <p begin="00:24:17.570" end="00:24:21.820">So, javascript accomplishes this iteration protocol by using three interfaces</p>
      <p begin="00:24:23.380" end="00:24:26.580">the called interfaces but actually interfaces aren't part of the</p>
      <p begin="00:24:26.580" end="00:24:29.460">...have borrowed the syntax from the type</p>
      <p begin="00:24:29.460" end="00:24:35.190">scriptures to describe the shape of the interface all interfaces to javascript</p>
      <p begin="00:24:35.190" end="00:24:41.600">is an object with a certain number of properties that's basically it so, this is</p>
      <p begin="00:24:41.600" end="00:24:47.040">...interfaces the first interface that's part of this iteration protocol and</p>
      <p begin="00:24:47.040" end="00:24:52.030">all that is a special method that the symbol that iterate or name that returns</p>
      <p begin="00:24:52.030" end="00:24:57.270">and integrator so if you want your object to be...you just implement the symbol</p>
      <p begin="00:24:57.270" end="00:25:02.440">that iterated property or return a new fresh integratorthat you can use to</p>
      <p begin="00:25:02.440" end="00:25:08.020">keeppulling values the thing they used to pull values is...interface</p>
      <p begin="00:25:08.020" end="00:25:13.370">...required to have a next method there's also return and throw which you can use for</p>
      <p begin="00:25:13.370" end="00:25:18.640">more...cases but those are optional on need is a next method and,</p>
      <p begin="00:25:18.640" end="00:25:24.710">that makes you...integrator as far as javascript is concerned so many call the next you get out</p>
      <p begin="00:25:24.710" end="00:25:28.720">of result the way you can check whether you're done or not is that this</p>
      <p begin="00:25:28.720" end="00:25:32.550">result has a boolean property done that tells you whether you're done or</p>
      <p begin="00:25:32.550" end="00:25:39.080">...it also has a value property that tells you...current values and that's all there is the</p>
      <p begin="00:25:39.080" end="00:25:43.980">stray interfaces combined produce this nice iteration protocol there's a bunch of new</p>
      <p begin="00:25:43.980" end="00:25:48.870">language features that except intervals now there's the new for of loop that you can use</p>
      <p begin="00:25:48.870" end="00:25:50.670">to iterate over any old</p>
      <p begin="00:25:50.670" end="00:25:54.330">...there's a spread operator that can,</p>
      <p begin="00:25:54.330" end="00:25:56.070">for example, paths.</p>
      <p begin="00:25:56.070" end="00:26:01.470">Every element of an interval to a function...individual</p>
      <p begin="00:26:01.470" end="00:26:06.330">arguments to function a array that from will take any it herbal and</p>
      <p begin="00:26:06.330" end="00:26:10.540">convert it to an array obviously be careful with infinite a...like if</p>
      <p begin="00:26:10.540" end="00:26:16.120">you arrayed out from the sinatra he'll probably...memory and,</p>
      <p begin="00:26:16.120" end="00:26:20.630">maps insets constructors like if you had an interval of key value...you could</p>
      <p begin="00:26:20.630" end="00:26:26.690">initialize a map using that eventually language features produce...so</p>
      <p begin="00:26:26.690" end="00:26:30.900">arrays obviously there errol the way that's accomplishes this read-out prototype</p>
      <p begin="00:26:30.900" end="00:26:36.140">...values which gives you an interval for the values of a particular array maps you can</p>
      <p begin="00:26:36.140" end="00:26:41.450">iterate...values and entries, entries are just key value...and</p>
      <p begin="00:26:41.450" end="00:26:46.320">...likewise you can iterate values so let's look at how this...</p>
      <p begin="00:26:46.320" end="00:26:48.620">...a simple example of an array and I just want</p>
      <p begin="00:26:48.620" end="00:26:53.190">to log each item of the array pretty straightforward.</p>
      <p begin="00:26:53.190" end="00:26:55.660">So, how does this work well...look at this array?</p>
      <p begin="00:26:56.710" end="00:27:00.360">And,...and for of loop will say okay I need you to</p>
      <p begin="00:27:00.360" end="00:27:03.460">...so it's going to look for a special symbol that</p>
      <p begin="00:27:03.460" end="00:27:07.140">...property...going to find it on a rate up prototype.</p>
      <p begin="00:27:07.140" end="00:27:08.600">And, it's going to call it and that's</p>
      <p begin="00:27:08.600" end="00:27:13.150">going return integrator and then for of is just going to call that next and that integrator until done</p>
      <p begin="00:27:13.150" end="00:27:21.310">is true passing each value to the loop so it's a nice easy way to iterate.</p>
      <p begin="00:27:21.310" end="00:27:25.960">Likewise maps...simple map here with two entries</p>
      <p begin="00:27:25.960" end="00:27:31.430">this default iteration scheme works the same way as array the default iteration</p>
      <p begin="00:27:31.430" end="00:27:36.470">scheme of maps key value pairs but you can actually customized this by saying,</p>
      <p begin="00:27:36.470" end="00:27:41.800">for example, values and then you just get the values of the map you can also do</p>
      <p begin="00:27:41.800" end="00:27:47.000">keys and just get the keys of the map so this is really the easy way if you have an</p>
      <p begin="00:27:47.000" end="00:27:52.280">object anyone...multiple iteration schemes you can do it this</p>
      <p begin="00:27:52.280" end="00:28:00.450">way just like maps...just have methods named after the iteration scheme that you want to expose.</p>
      <p begin="00:28:00.450" end="00:28:03.960">So, let's actually get a better understanding of</p>
      <p begin="00:28:03.960" end="00:28:08.020">...by and implementing one from scratch.</p>
      <p begin="00:28:08.020" end="00:28:13.000">what I want to do here is I want to long zero to four and let's sort of do this by</p>
      <p begin="00:28:13.000" end="00:28:17.910">running it and doing what we fixing all errors?</p>
      <p begin="00:28:19.040" end="00:28:22.350">Okay, so, the first-year we see is we don't have a simple</p>
      <p begin="00:28:22.350" end="00:28:27.320">iterative property okay so it's going to call counter for...going to call counter of five and it's going to expect that</p>
      <p begin="00:28:27.320" end="00:28:33.440">thing that this returns is an interval okay so we need to return some objects.</p>
      <p begin="00:28:33.440" end="00:28:38.530">That has...integrator method.</p>
      <p begin="00:28:38.530" end="00:28:42.340">Okay, and, just for simplicity sake we're going to return the same object.</p>
      <p begin="00:28:43.420" end="00:28:48.120">We don't need to do all kinds of crazy nesting.</p>
      <p begin="00:28:48.120" end="00:28:51.220">Ok, so, now the next air that's complaining about is</p>
      <p begin="00:28:51.220" end="00:28:54.540">...doesn't have the property or method next well that's because</p>
      <p begin="00:28:54.540" end="00:29:00.920">we're not satisfying the integrator interface we need to implement next on this guy.</p>
      <p begin="00:29:00.920" end="00:29:02.790">...it done.</p>
      <p begin="00:29:02.790" end="00:29:04.210">Unable to get the</p>
      <p begin="00:29:04.210" end="00:29:08.170">...looking for done on something and now the problem is the for of</p>
      <p begin="00:29:08.170" end="00:29:11.870">lupus called next it's done on define from...just doesn't know what to do so</p>
      <p begin="00:29:11.870" end="00:29:15.900">...that's rightfully confused okay so we need to actually give it a</p>
      <p begin="00:29:15.900" end="00:29:38.660">...saw implement that now.</p>
      <p begin="00:29:38.660" end="00:29:42.670">All right and now if I run this everything works returning</p>
      <p begin="00:29:42.670" end="00:29:47.290">iterated results from this next method which makes me...adverse symbol that</p>
      <p begin="00:29:47.290" end="00:29:51.950">iterative property which returns iterate...and that makes me an...so it's a little</p>
      <p begin="00:29:51.950" end="00:29:59.040">...complicated but that's how you would implement and integrator from scratch.</p>
      <p begin="00:29:59.040" end="00:30:03.380">So, the good news is actually you don't need to do that for the most part you can actually just use</p>
      <p begin="00:30:03.380" end="00:30:07.510">...generators also known as generated also known</p>
      <p begin="00:30:07.510" end="00:30:12.430">as generator functions are functions that return multiple values</p>
      <p begin="00:30:13.580" end="00:30:17.530">and they do that by being intolerable and the by</p>
      <p begin="00:30:17.530" end="00:30:20.400">...returning...when they're called so if you think about</p>
      <p begin="00:30:20.400" end="00:30:26.060">a normal function when you call it it's going to execute every statement</p>
      <p begin="00:30:26.060" end="00:30:31.000">of the function until it hits a return and then that will come out of the function with</p>
      <p begin="00:30:31.000" end="00:30:36.630">the generator function when you call the generator it actually doesn't run anything it just gives you an integrator and</p>
      <p begin="00:30:36.630" end="00:30:41.620">then...call dot next on the integrator that's when the generator body starts running but then rather</p>
      <p begin="00:30:41.620" end="00:30:46.470">than looking for a...state and it's looking for a yield</p>
      <p begin="00:30:46.470" end="00:30:52.540">and every single time it sees a yield...is yielded will come out of the next and the generator will</p>
      <p begin="00:30:52.540" end="00:30:58.750">suspend...just wait there for the consumer to call the next again.</p>
      <p begin="00:30:58.750" end="00:31:03.550">So, generators fundamentally just make...innovators nicer in fact there's it's</p>
      <p begin="00:31:03.550" end="00:31:07.330">so nice that and useful that you probably</p>
      <p begin="00:31:07.330" end="00:31:13.030">won't like that handling code that I had you probably won't ever have to write...your life thankfully but,</p>
      <p begin="00:31:13.030" end="00:31:17.710">this it turns out that this core capability that generators...language of being able to</p>
      <p begin="00:31:17.710" end="00:31:22.420">suspend the function body until later is all you need to actually get</p>
      <p begin="00:31:22.420" end="00:31:30.030">a encode to be even better than it is with promises so let's take a look.</p>
      <p begin="00:31:30.030" end="00:31:35.900">All right so first let's start just by understanding generators...notice that we have this function</p>
      <p begin="00:31:35.900" end="00:31:39.810">Up here the star as with signifies that this is a generator function and not</p>
      <p begin="00:31:39.810" end="00:31:44.220">a normal function so, we can try running it and</p>
      <p begin="00:31:44.220" end="00:31:47.860">...running after trust me that there's no air and that's because</p>
      <p begin="00:31:47.860" end="00:31:51.770">unlike the integrator thing generators always return</p>
      <p begin="00:31:51.770" end="00:31:59.540">in integrator so this is just an empty generator body and, I call counter.</p>
      <p begin="00:31:59.540" end="00:32:02.740">...next on that...done of true immediately</p>
      <p begin="00:32:02.740" end="00:32:07.370">...the for of loop is just saying okay you're done right away so I'm not I'm not I'm not going to</p>
      <p begin="00:32:07.370" end="00:32:14.000">log anything for you there's nothing there so, the way this works is four-hour will get out the error call necks</p>
      <p begin="00:32:14.000" end="00:32:19.750">...generator rule run until there's a yields so we could put the whoops.</p>
      <p begin="00:32:19.750" end="00:32:23.090">Could for...in there?</p>
      <p begin="00:32:23.090" end="00:32:25.530">So, now we get one yield to.</p>
      <p begin="00:32:26.790" end="00:32:42.400">...okay that's not the right way to do that the right way to do this is.</p>
      <p begin="00:32:42.400" end="00:32:46.860">So, there we have the exact same semantics more or less as the</p>
      <p begin="00:32:46.860" end="00:32:51.480">iterate or code from previously implemented in one-line although I think js</p>
      <p begin="00:32:51.480" end="00:32:55.450">and would complain...would make it three lines but regardless</p>
      <p begin="00:32:55.450" end="00:33:00.640">much more simple no messing around with manually returning any of those</p>
      <p begin="00:33:00.640" end="00:33:06.030">...interfaces the generator takes care of all of it</p>
      <p begin="00:33:06.030" end="00:33:10.320">for us so, that's really nice?</p>
      <p begin="00:33:10.320" end="00:33:13.190">So, now I have kind of a little bit of</p>
      <p begin="00:33:13.190" end="00:33:18.590">...understanding of whatgenerators can do?</p>
      <p begin="00:33:18.590" end="00:33:22.970">Let's actually use it to team asynchronous code in</p>
      <p begin="00:33:22.970" end="00:33:26.150">an a really awesome way...time-out function is backward</p>
      <p begin="00:33:26.150" end="00:33:30.450">...use that as a motivating example here.</p>
      <p begin="00:33:30.450" end="00:33:34.690">So, here's the here's the code that we want to riot.</p>
      <p begin="00:33:34.690" end="00:33:39.550">The code that we want to...is to...some value or do some synchronous task and then we</p>
      <p begin="00:33:39.550" end="00:33:44.830">want to wait for some amount of time now and then we want to do some more stuff?</p>
      <p begin="00:33:44.830" end="00:33:49.870">Maybe want to do that a couple more times just so it's clear.</p>
      <p begin="00:33:49.870" end="00:33:55.890">All right so you might notice that this code looks pretty close to if you're familiar</p>
      <p begin="00:33:55.890" end="00:34:01.510">csharp it's pretty close to what you might...inside of an asic function and a single</p>
      <p begin="00:34:01.510" end="00:34:05.920">weight style of programming here except instead of yield</p>
      <p begin="00:34:05.920" end="00:34:12.390">...or instead of...so, that's kind of what I'm trying to get to here is by</p>
      <p begin="00:34:12.390" end="00:34:17.280">yielding promises out of this generator I want to just wait and not run the generator keep</p>
      <p begin="00:34:17.280" end="00:34:21.550">the generator suspended until the promise resolves and then the</p>
      <p begin="00:34:21.550" end="00:34:30.820">...back up again and spawn is what's going to be responsible for doing that so let's actually implement spun.</p>
      <p begin="00:34:30.820" end="00:34:34.850">Case the first thing that we need to do is get the integrator from the generator so recall</p>
      <p begin="00:34:34.850" end="00:34:39.660">...this doesn't running code this just gets the just warms up the generator and</p>
      <p begin="00:34:39.660" end="00:34:44.550">suspended immediately the for runs...</p>
      <p begin="00:34:44.550" end="00:34:50.839">We need a function that's going to get the next value from the generator.</p>
      <p begin="00:34:50.839" end="00:34:54.939">And, since...asynchronous fundamentally...it's easier if</p>
      <p begin="00:34:54.939" end="00:34:59.840">it's function rather than trying to do it with loops.</p>
      <p begin="00:34:59.840" end="00:35:07.150">Okay, so, the first thing we need to do is get the next value.</p>
      <p begin="00:35:07.150" end="00:35:09.120">Entered next.</p>
      <p begin="00:35:09.120" end="00:35:13.550">Ok, so, now I've got the next value out of the generator so whenever I do this</p>
      <p begin="00:35:13.550" end="00:35:16.430">I need to check whether I'm done...so current</p>
      <p begin="00:35:16.430" end="00:35:23.080">...is an...iterated result so first I want to check if we're done.</p>
      <p begin="00:35:23.080" end="00:35:26.410">Handle that later that's less interesting at this point</p>
      <p begin="00:35:26.410" end="00:35:31.690">...if we're not done that means that this generator body.</p>
      <p begin="00:35:31.690" end="00:35:36.970">Scroll down...keep looking at the generator body that means that this generator body has</p>
      <p begin="00:35:36.970" end="00:35:42.370">yielded me something so it's yielded me actually a promise so...that value is a</p>
      <p begin="00:35:42.370" end="00:35:47.200">promise and now I need to tell-all spawn somehow to</p>
      <p begin="00:35:47.200" end="00:35:52.120">tell the generator to the to pick back up where it left off as soon as the promise results</p>
      <p begin="00:35:53.260" end="00:35:59.530">and you do that without then is how that's done so then is going to be cong when this promise that is</p>
      <p begin="00:35:59.530" end="00:36:06.140">...are the generator return or resolves and...need to just take forward again?</p>
      <p begin="00:36:06.140" end="00:36:08.850">And, this will then get the next value out of</p>
      <p begin="00:36:08.850" end="00:36:14.130">...analogy continue until we're done so at this point if I run it.</p>
      <p begin="00:36:14.130" end="00:36:17.000">All goes according to plan it should work.</p>
      <p begin="00:36:17.000" end="00:36:22.230">So, I've successfully implemented tag...spun.</p>
      <p begin="00:36:22.230" end="00:36:28.020">But, I'm still missing this return value for one thing so,</p>
      <p begin="00:36:28.020" end="00:36:32.610">let's just do that quick so this return value isn't produced</p>
      <p begin="00:36:32.610" end="00:36:38.330">until after some launch an indeterminate amount of time basically...asynchronous</p>
      <p begin="00:36:38.330" end="00:36:43.870">lee produced value and...passing this generator despondent clearly spun is going to</p>
      <p begin="00:36:43.870" end="00:36:48.970">have to be the one to give me this return value and respond is going to</p>
      <p begin="00:36:48.970" end="00:36:53.710">be returning me some value asynchronous...so...that's the case</p>
      <p begin="00:36:53.710" end="00:37:10.990">whatever's going to produce evaluate synchronous...we're going to...return new promise?</p>
      <p begin="00:37:10.990" end="00:37:14.960">Okay, and, this is going to be the promise for the return value of the generator and</p>
      <p begin="00:37:14.960" end="00:37:19.810">return value the generator comes out as the value of the iteration result</p>
      <p begin="00:37:19.810" end="00:37:26.320">when it's done so then we can just do you?</p>
      <p begin="00:37:26.320" end="00:37:27.740">We can just do</p>
      <p begin="00:37:27.740" end="00:37:33.530">...dot value actually resolve</p>
      <p begin="00:37:33.530" end="00:37:35.600">...value and now</p>
      <p begin="00:37:35.600" end="00:37:43.960">we've resolved this promise that I return from spawn with whatever value the generator</p>
      <p begin="00:37:43.960" end="00:37:48.560">So, we can do the say here instead that then.</p>
      <p begin="00:37:48.560" end="00:37:49.880">Got return value.</p>
      <p begin="00:37:57.850" end="00:37:59.740">If...did everything right.</p>
      <p begin="00:37:59.740" end="00:38:09.160">Which see one-two-three and return value of done ...work...I do?</p>
      <p begin="00:38:09.160" end="00:38:17.070">The on.</p>
      <p begin="00:38:17.070" end="00:38:22.130">Well, it's not obvious what I've done here.</p>
      <p begin="00:38:22.130" end="00:38:25.400">No, the return value is when I yield you get done</p>
      <p begin="00:38:25.400" end="00:38:29.940">of false always and when you return that's when you get done of true and then</p>
      <p begin="00:38:29.940" end="00:38:37.300">what every return from the generator that's what's going to be...value?</p>
      <p begin="00:38:37.300" end="00:38:40.290">Yeah, that's what I'm doing I just have a string here.</p>
      <p begin="00:38:40.290" end="00:38:43.260">Thank you.</p>
      <p begin="00:38:43.260" end="00:38:48.090">New code reviews that's why like coding is fun okay now it should work yes</p>
      <p begin="00:38:48.090" end="00:38:53.980">excellent okay thank you.</p>
      <p begin="00:38:53.980" end="00:39:00.590">So, that's really cool this is actually just the start of what you can do with this so you can actually make</p>
      <p begin="00:39:00.590" end="00:39:06.280">yieldreturn or rather than give a value...so that's what I'm showing here</p>
      <p begin="00:39:06.280" end="00:39:11.840">is you can actually ...equal this value time-out doesn't resolved anything but say the</p>
      <p begin="00:39:11.840" end="00:39:16.130">time-out promise resolved to a value all we could plan that through pretty easily</p>
      <p begin="00:39:16.130" end="00:39:20.900">by saying hey take takes a value ...that into dot next that's</p>
      <p begin="00:39:20.900" end="00:39:25.220">...comes out of the yield and then this promises going to resolve by calling</p>
      <p begin="00:39:25.220" end="00:39:30.130">...with that values so I mean that's pretty much done I don't have an example of that and,</p>
      <p begin="00:39:30.130" end="00:39:32.750">you can also say hey if a promise rejects make yield</p>
      <p begin="00:39:32.750" end="00:39:38.330">...error that's what those other that error and return methods on the</p>
      <p begin="00:39:38.330" end="00:39:43.730">...interface that I was explaining earlier that's what you can use those for so you could say instead of internet</p>
      <p begin="00:39:43.730" end="00:39:49.730">next you could say it out throat and then in your the generator body you can</p>
      <p begin="00:39:49.730" end="00:39:56.770">handle errors with try catch rather than using promise call backs.</p>
      <p begin="00:39:56.770" end="00:40:01.080">So, this is just super nice to be able to use</p>
      <p begin="00:40:01.080" end="00:40:06.040">...like a and doing asynchronous code but I'm not using any call backs are not using any of</p>
      <p begin="00:40:06.040" end="00:40:10.910">that stuff that's very close to a single...in fact it's so close</p>
      <p begin="00:40:10.910" end="00:40:15.650">that like we have almost all of the useful semantics facing...the only thing that</p>
      <p begin="00:40:15.650" end="00:40:20.930">we need to do really is build in the spawn function and</p>
      <p begin="00:40:20.930" end="00:40:25.910">change the yield keyword to...and actually that's what we're going to do for</p>
      <p begin="00:40:25.910" end="00:40:32.450">the next version of javascript hopefully asic functions will be in yes,</p>
      <p begin="00:40:32.450" end="00:40:37.210">twenty sixteen or certainly soon after and, that</p>
      <p begin="00:40:37.210" end="00:40:45.040">...just be syntactic sugar for this really awesomepattern for asynchronous code?</p>
      <p begin="00:40:45.040" end="00:40:47.720">So, that's generators.</p>
      <p begin="00:40:47.720" end="00:40:52.690">The generators and iterated ears and promises and</p>
      <p begin="00:40:52.690" end="00:40:57.080">...functions these are all-new yes six features that can really help</p>
      <p begin="00:40:57.080" end="00:41:01.590">clean up your in synchronous code can make your...encode just significantly</p>
      <p begin="00:41:01.590" end="00:41:05.870">...you can...so much easier to read you can just do huge</p>
      <p begin="00:41:06.980" end="00:41:12.110">...chains of operations without having to worry about you know,</p>
      <p begin="00:41:12.110" end="00:41:16.750">matching up all of your close cruelly close paren things so it's yes</p>
      <p begin="00:41:16.750" end="00:41:22.940">...just makes is your ace encode just so much nicer?</p>
      <p begin="00:41:22.940" end="00:41:27.310">So, with that take step away from the</p>
      <p begin="00:41:27.310" end="00:41:31.320">...six stuff and talk about some of the progress in microsoft</p>
      <p begin="00:41:31.320" end="00:41:36.730">edge in some new future stuff that's coming to javascript it's not any</p>
      <p begin="00:41:36.730" end="00:41:42.940">...but this is these are more ...things.</p>
      <p begin="00:41:42.940" end="00:41:46.210">The first one I want to talk about is as...js.</p>
      <p begin="00:41:46.210" end="00:41:50.220">...is a optimized</p>
      <p begin="00:41:50.220" end="00:41:55.310">abel low-level subset of javascript so that's impact that and think</p>
      <p begin="00:41:55.310" end="00:41:59.720">about that means we have a sub-set so that means that as mds code is just</p>
      <p begin="00:41:59.720" end="00:42:04.200">...javascript code if your browser doesn't know what as mj asses and it comes across as</p>
      <p begin="00:42:04.200" end="00:42:09.160">...code...run it just fine because it's actually just javascript it's just not going to optimize...can run</p>
      <p begin="00:42:09.160" end="00:42:10.620">it really slowly.</p>
      <p begin="00:42:10.620" end="00:42:14.900">But, the inverse is actually not true most javascript code in fact ninety nine-point</p>
      <p begin="00:42:14.900" end="00:42:19.600">nine percent of javascript code is not valid as...code</p>
      <p begin="00:42:19.600" end="00:42:24.270">...a very tiny subset and as a result this as</p>
      <p begin="00:42:24.270" end="00:42:29.600">...stuff is not something that you're going to be handwritingI mean maybe some of you will but I wouldn't recommend it</p>
      <p begin="00:42:29.600" end="00:42:32.390">very difficult.</p>
      <p begin="00:42:32.390" end="00:42:35.450">It serves more as a target for compilers so</p>
      <p begin="00:42:35.450" end="00:42:40.890">they're actually compilers out there right now...is one of them that will compile your</p>
      <p begin="00:42:40.890" end="00:42:46.330">...cplus-plus native code to this as...that will run in the browser</p>
      <p begin="00:42:46.330" end="00:42:51.070">at near native performance how does that work well</p>
      <p begin="00:42:51.070" end="00:42:55.680">as mds code is compiled ahead of time there's no jet</p>
      <p begin="00:42:55.680" end="00:42:59.060">there's nobel us there's no gc that gets you really</p>
      <p begin="00:42:59.060" end="00:43:04.190">predictable solid performance it's very much like you're...native code where you compile</p>
      <p begin="00:43:04.190" end="00:43:10.610">at once and then the machine just runs it there's no runtime getting in the way.</p>
      <p begin="00:43:10.610" end="00:43:13.660">...because the subset...so tiny.</p>
      <p begin="00:43:13.660" end="00:43:18.470">And, geared towards making optimizations possible we can use some really,</p>
      <p begin="00:43:18.470" end="00:43:20.770">really aggressive optimization similar to the kinds of</p>
      <p begin="00:43:20.770" end="00:43:27.800">things that native compilers are doing and this gets us performance wins especially in</p>
      <p begin="00:43:27.800" end="00:43:32.540">...scenarios that's gets us actually really close to the native</p>
      <p begin="00:43:32.540" end="00:43:39.090">performance so with that I want to show a quick demo.</p>
      <p begin="00:43:39.090" end="00:43:49.300">Of what you can do with as...js.</p>
      <p begin="00:43:49.300" end="00:43:52.190">It's got a load.</p>
      <p begin="00:43:52.190" end="00:43:57.270">I'll switch so we can we can...load together.</p>
      <p begin="00:43:57.270" end="00:44:01.290">So, primal defenders is game it's written</p>
      <p begin="00:44:01.290" end="00:44:06.180">...using the unity engine and much of this code is actually</p>
      <p begin="00:44:06.180" end="00:44:11.030">native code and it's been compiled to run on the web using as</p>
      <p begin="00:44:11.030" end="00:44:13.800">...js so here we have</p>
      <p begin="00:44:13.800" end="00:44:17.060">...using web gl and its using...as</p>
      <p begin="00:44:17.060" end="00:44:24.910">...and it's running at super close to natives speeds and play a little bit of</p>
      <p begin="00:44:24.910" end="00:44:29.110">this tower defense kind of dangerous make sure you warn</p>
      <p begin="00:44:29.110" end="00:44:34.760">...from up here for more than a few minutes.</p>
      <p begin="00:44:34.760" end="00:44:40.990">But, anyway, I mean you can see it's really nice and smooth you get really nice graphics in the</p>
      <p begin="00:44:40.990" end="00:44:47.500">performances is great it's really awesome so we've partnered with</p>
      <p begin="00:44:47.500" end="00:44:51.080">or been working with rather.</p>
      <p begin="00:44:51.080" end="00:44:52.460">Missoula on as</p>
      <p begin="00:44:52.460" end="00:44:59.790">...missoula pioneered this technology and we're happy to bring this to</p>
      <p begin="00:45:01.570" end="00:45:06.800">...edge you can actually turn it on right now if you have latest...if you go you</p>
      <p begin="00:45:06.800" end="00:45:10.510">about flags scroll all the way down the bottom there's enable as ingest</p>
      <p begin="00:45:10.510" end="00:45:14.530">...and this primal defenders is out there you can find</p>
      <p begin="00:45:14.530" end="00:45:18.890">it you can play it there's a bunch of other as...gs plus web...web gl stuff</p>
      <p begin="00:45:18.890" end="00:45:25.250">and it's a lot of fun so enjoy that but,</p>
      <p begin="00:45:25.250" end="00:45:28.130">anyway, so, as addresses is really really awesome</p>
      <p begin="00:45:28.130" end="00:45:37.020">technology forgetting us for allowing native code just to run directly on the web.</p>
      <p begin="00:45:37.020" end="00:45:41.140">So, but, there is there's some problems so if you think about your native code you native code</p>
      <p begin="00:45:41.140" end="00:45:48.100">has access to the hardware it has access to the cpu instructions you</p>
      <p begin="00:45:48.100" end="00:45:52.220">can drop into assembly even if you need to and get super low-level</p>
      <p begin="00:45:52.220" end="00:45:56.970">the web platform doesn't have that capability it has javascript so, the only</p>
      <p begin="00:45:56.970" end="00:46:03.570">...access to hardware that you get is sort of mediated by the web platform but, and,</p>
      <p begin="00:46:03.570" end="00:46:09.250">really key technology that is lacking in the web platform is</p>
      <p begin="00:46:09.250" end="00:46:10.400">cindy</p>
      <p begin="00:46:10.400" end="00:46:14.750">...stands for stands for single instruction multiple data and these are hardware</p>
      <p begin="00:46:14.750" end="00:46:20.310">instructions that you multiple calculations but just use a single instruction so,</p>
      <p begin="00:46:20.310" end="00:46:24.790">the way to think about this is...have four numbers and for other numbers...you want to add each pair</p>
      <p begin="00:46:24.790" end="00:46:31.270">of numbers together you could do that with for...operations but it be nice if we didn't needs</p>
      <p begin="00:46:31.270" end="00:46:35.280">...for operations be nice if we could use just one operation to do all those ads</p>
      <p begin="00:46:35.280" end="00:46:37.830">together and that's actually what cindy does with one</p>
      <p begin="00:46:37.830" end="00:46:43.600">simply operation you can ad for numbers to for other numbers and get a vector of the results?</p>
      <p begin="00:46:43.600" end="00:46:48.550">So, this works on anything where you need to apply the same operation to all elements of the vector</p>
      <p begin="00:46:48.550" end="00:46:53.560">the sdts, for example,...rgb year rgb a pixels so, if you're doing</p>
      <p begin="00:46:53.560" end="00:46:59.320">image manipulation kind of stuff multimedia that's a great opportunity for</p>
      <p begin="00:46:59.320" end="00:47:03.400">...usually...xyz or xyz w coordinates another</p>
      <p begin="00:47:03.400" end="00:47:10.030">example of something that can be easily translated to...or even just arbitrary length</p>
      <p begin="00:47:10.030" end="00:47:13.790">...where you can just take chunks of for off of this</p>
      <p begin="00:47:13.790" end="00:47:20.280">array and process them and chunks you basically get a for...</p>
      <p begin="00:47:20.280" end="00:47:24.440">So, intel we've been working with intel to build cindy into</p>
      <p begin="00:47:24.440" end="00:47:29.120">...run into microsoft edge it's not available yet but it will</p>
      <p begin="00:47:29.120" end="00:47:35.760">be soon so this machine here is actually an experimentaledge build</p>
      <p begin="00:47:35.760" end="00:47:43.210">...experimental build and I do have cindy enabled on it so I can actually demonstrate.</p>
      <p begin="00:47:44.380" end="00:47:55.750">...can do for us.</p>
      <p begin="00:47:55.750" end="00:48:05.310">Okay, sorry I'm extremely close it.</p>
      <p begin="00:48:05.310" end="00:48:17.290">On the network is down...any secondly worth I promise.</p>
      <p begin="00:48:17.290" end="00:48:28.180">Actually we don't need primal dissenters opening anymore doing.</p>
      <p begin="00:48:28.180" end="00:48:55.910">The demo...</p>
      <p begin="00:48:55.910" end="00:48:59.030">...same right doesn't.</p>
      <p begin="00:48:59.030" end="00:49:04.180">Also happens when you're running even experimental os there goes all right so</p>
      <p begin="00:49:04.180" end="00:49:04.680">cindy.</p>
      <p begin="00:49:06.020" end="00:49:08.280">We are.</p>
      <p begin="00:49:08.280" end="00:49:12.160">Ok, so, this is a mandel brought illustration this is a fractal and we can</p>
      <p begin="00:49:12.160" end="00:49:17.370">render this guy without using cindy notice we get.</p>
      <p begin="00:49:17.370" end="00:49:22.130">...kind of kind of jerky it's not quite as smooth as we'd like especially when we get into more</p>
      <p begin="00:49:22.130" end="00:49:28.330">detailed parts the fractal drops down to maybe nine maybe eight frames per second so let's turn on</p>
      <p begin="00:49:28.330" end="00:49:32.060">symmetry...the exact same hardware.</p>
      <p begin="00:49:32.060" end="00:49:36.640">But, actually taking full advantage of the cpu this is not paralyzed across</p>
      <p begin="00:49:36.640" end="00:49:41.390">multiple cores even this is just using...instructions and now</p>
      <p begin="00:49:41.390" end="00:49:48.030">the animation is really nice and smooth and, it's.</p>
      <p begin="00:49:48.030" end="00:49:51.750">Using this basically the same amount of cpu our so,</p>
      <p begin="00:49:51.750" end="00:49:56.360">that means you get for xf ps improvement in some cases using the same amount of</p>
      <p begin="00:49:56.360" end="00:50:00.430">our from your device means better battery life and,</p>
      <p begin="00:50:02.030" end="00:50:03.760">you can actually compile</p>
      <p begin="00:50:03.760" end="00:50:14.010">...native code that might be using cindy optimizations to run on web platform now.</p>
      <p begin="00:50:14.010" end="00:50:16.190">So, we're super excited</p>
      <p begin="00:50:16.190" end="00:50:22.690">...you to show you cindy it's not it's not quite in yet but it will be soon.</p>
      <p begin="00:50:22.690" end="00:50:25.350">So, I hope after all this you take</p>
      <p begin="00:50:25.350" end="00:50:30.050">away is that the future of javascript development is here with the six there's some really great new stuff that</p>
      <p begin="00:50:30.050" end="00:50:33.770">you can do a asynchronous ramming especially benefits from</p>
      <p begin="00:50:33.770" end="00:50:38.050">the fsix with those new with promises being built in you don't need a library more</p>
      <p begin="00:50:38.050" end="00:50:42.830">arrow functions typing function keyword all the time that's all gone</p>
      <p begin="00:50:42.830" end="00:50:48.190">...generators new capabilities in a language that not only make asynchronous</p>
      <p begin="00:50:48.190" end="00:50:53.440">code nicer but make other things nicer as well like actually iterating things</p>
      <p begin="00:50:53.440" end="00:50:58.800">an edge has just great support for...six stuff right now you can try it out and,</p>
      <p begin="00:50:58.800" end="00:51:03.120">certainly after you do let us know you think you can contact me on twitter</p>
      <p begin="00:51:03.120" end="00:51:08.450">especially and, we've also brought some near native performance the web platform</p>
      <p begin="00:51:08.450" end="00:51:12.560">with cindy and with as...js you can compile</p>
      <p begin="00:51:12.560" end="00:51:16.270">your native code to run on chopper in microsoft edge</p>
      <p begin="00:51:16.270" end="00:51:18.760">...your...speedsso,</p>
      <p begin="00:51:18.760" end="00:51:24.410">with that I'm here for questions also be hanging out at the insider lounge after this</p>
      <p begin="00:51:24.410" end="00:51:36.740">for probably an hour and a half so,...questions.</p>
      <p begin="00:51:36.740" end="00:51:43.270">Sure, the question is glossed over because...</p>
      <p begin="00:51:43.270" end="00:51:46.890">Kind of a hard thing to talk about...you have extra time so</p>
      <p begin="00:51:46.890" end="00:51:52.240">that the question was what is that weird square bracket thing and I assume you're talking about</p>
      <p begin="00:51:52.240" end="00:51:54.580">...the innovators code sample.</p>
      <p begin="00:51:54.580" end="00:52:00.040">Had this.</p>
      <p begin="00:52:00.040" end="00:52:05.320">Let's see right I had this thing right this is your question what</p>
      <p begin="00:52:05.320" end="00:52:09.600">is this nonsense so this is a computed properties so I can actually put</p>
      <p begin="00:52:09.600" end="00:52:14.520">...here this is a property name so I could put foo-foo plus.</p>
      <p begin="00:52:14.520" end="00:52:19.490">Bar and this would make a property name...bar so,</p>
      <p begin="00:52:19.490" end="00:52:26.200">it's called computed properties that's inside of the square bracket and the symbol thing.</p>
      <p begin="00:52:26.200" end="00:52:33.180">Is ...a new thing symbols or a new kind of property that</p>
      <p begin="00:52:33.180" end="00:52:38.020">it doesn't have a string name it's actually just a it's kinda like symbols and ruby if,</p>
      <p begin="00:52:38.020" end="00:52:43.120">you know, if, you know, ruby it's like...unique name every new symbol is guaranteed</p>
      <p begin="00:52:43.120" end="00:52:48.700">to be unique so like I could make a new symbol like this and then there's</p>
      <p begin="00:52:48.700" end="00:52:53.640">the symbol global that has a bunch of built-in symbols and these are what</p>
      <p begin="00:52:53.640" end="00:52:58.220">language knows to look for certain protocols like the iteration protocols built around the</p>
      <p begin="00:52:58.220" end="00:53:02.450">symbol dot integrator there's also a symbol that to string tag which</p>
      <p begin="00:53:02.450" end="00:53:07.020">language will look forward to see what the to string output of an object should be,</p>
      <p begin="00:53:07.020" end="00:53:16.970">for example, so, that's a new year six feature called symbols that's what that's what this?</p>
      <p begin="00:53:16.970" end="00:53:23.870">No, because I mean you could so, you might say like well symbol.</p>
      <p begin="00:53:23.870" end="00:53:28.580">And, you can you could make a property called with the string but,</p>
      <p begin="00:53:28.580" end="00:53:31.860">then the for of loop isn't going to see this thing</p>
      <p begin="00:53:31.860" end="00:53:38.610">...herbal it's not going to satisfy the edible ...need to use the global</p>
      <p begin="00:53:38.610" end="00:53:42.290">the symbol dot iterative property because that's what because this for of loop</p>
      <p begin="00:53:42.290" end="00:53:45.120">...basically going to say you know, if</p>
      <p begin="00:53:46.830" end="00:53:49.010">...the symbol</p>
      <p begin="00:53:49.010" end="00:53:54.130">that integrator then it herbal us, you know,</p>
      <p begin="00:53:54.130" end="00:53:57.850">throw some not herbal error or something so that's</p>
      <p begin="00:53:57.850" end="00:54:01.900">...that iterated property key is what the for of loop and everything else that accepts</p>
      <p begin="00:54:01.900" end="00:54:07.070">intervals is looking for a on your on your objects.</p>
      <p begin="00:54:07.070" end="00:54:12.510">But, the good news is you don't really need to implement...generators.</p>
      <p begin="00:54:12.510" end="00:54:27.700">Other questions yes.</p>
      <p begin="00:54:27.700" end="00:54:33.800">So, the question was for people that are supporting older browsers today how are they</p>
      <p begin="00:54:33.800" end="00:54:39.430">going to migrate over to the six hiring a start taking advantage of this stuff.</p>
      <p begin="00:54:39.430" end="00:54:44.350">So, I think actually one of the most exciting parts of the being a javascript developer right now is</p>
      <p begin="00:54:44.350" end="00:54:46.690">that unlike.</p>
      <p begin="00:54:46.690" end="00:54:49.950">In previous eras when we got new versions of the language</p>
      <p begin="00:54:49.950" end="00:54:53.540">nowthere's this new thing called trance piling</p>
      <p begin="00:54:53.540" end="00:54:57.460">it's basically compiling one version of javascript to another version of javascript</p>
      <p begin="00:54:58.730" end="00:55:03.160">and, the type script does this so you could use...a bunch of the six features</p>
      <p begin="00:55:03.160" end="00:55:05.970">...script and that will compile</p>
      <p begin="00:55:05.970" end="00:55:11.320">that code down to run on yes five or even...that would run all the way</p>
      <p begin="00:55:11.320" end="00:55:17.090">back to eighty-nine maybe even earlier there's also other tools on the while that do this babble is</p>
      <p begin="00:55:17.090" end="00:55:20.330">really popular one that targets rather than the type script language</p>
      <p begin="00:55:20.330" end="00:55:24.960">...quite strictly yes next yes, six and some,...</p>
      <p begin="00:55:24.960" end="00:55:29.040">seven stuff and...will compile your generators and</p>
      <p begin="00:55:29.040" end="00:55:33.490">all your others symbols and all that stuff down to just...five code so,</p>
      <p begin="00:55:33.490" end="00:55:35.870">that's a great way to get started because then you can just checking</p>
      <p begin="00:55:35.870" end="00:55:40.790">yes six in your code base and then as part of your build process you just dump out the</p>
      <p begin="00:55:40.790" end="00:55:45.880">cs five code and that goes up...to production it's</p>
      <p begin="00:55:45.880" end="00:55:50.450">actually really exciting time unlike previously where we had to wait for all of your customers</p>
      <p begin="00:55:50.450" end="00:56:01.470">...have the latest browser today you don't have to do that you can just usethese translation tools.</p>
      <p begin="00:56:01.470" end="00:56:06.340">I wrote myself the much of it</p>
      <p begin="00:56:06.340" end="00:56:11.950">is using yes six stuff on the editor is.</p>
      <p begin="00:56:11.950" end="00:56:17.780">Monaco editor believe it's the same that is on.</p>
      <p begin="00:56:17.780" end="00:56:22.420">...visual studio dot com and also in code I believe the joys</p>
      <p begin="00:56:22.420" end="00:56:37.580">...being a microsoft employees I can just roam around grab codes place.</p>
      <p begin="00:56:37.580" end="00:56:40.790">For now that is.</p>
      <p begin="00:56:40.790" end="00:56:44.080">Only I mean it will be delivered...edge before hits the standard</p>
      <p begin="00:56:44.080" end="00:56:48.590">...the intention is certainly for to be part of standard intel is</p>
      <p begin="00:56:48.590" end="00:56:53.030">chanting that proposal in the expertise and committee and,</p>
      <p begin="00:56:53.030" end="00:57:03.170">then made landing a seven and even so you might get that twenty sixteen.</p>
      <p begin="00:57:03.170" end="00:57:06.500">No, you can use sandia outside of as</p>
      <p begin="00:57:06.500" end="00:57:12.490">in js although I believe in our up-coming implementation of</p>
      <p begin="00:57:12.490" end="00:57:16.560">some...will be tied together you only get the performance benefits of</p>
      <p begin="00:57:16.560" end="00:57:20.150">cindy in as...code but,</p>
      <p begin="00:57:20.150" end="00:57:25.580">the intention is eventually that cindy will be available even outside of...the so</p>
      <p begin="00:57:25.580" end="00:57:27.960">you can there's it's just like you get</p>
      <p begin="00:57:27.960" end="00:57:32.080">this global cindy and then you can call operations on cindy to create</p>
      <p begin="00:57:32.080" end="00:57:40.000">vectors and to do these mathematical operations in parallel.</p>
      <p begin="00:57:40.000" end="00:57:43.300">No, out of victimization there is a separate proposal that actually intel</p>
      <p begin="00:57:43.300" end="00:57:47.420">...working on with missoula called parallel js but,</p>
      <p begin="00:57:47.420" end="00:57:49.240">it turns out of victimization is really,</p>
      <p begin="00:57:49.240" end="00:57:55.480">really hard so,...like in javascript knowing</p>
      <p begin="00:57:55.480" end="00:58:00.380">what a pure what functions are pure what functions don't have side effects is actually a really difficult</p>
      <p begin="00:58:00.380" end="00:58:09.020">problem for the compiler and...victimization depends really heavily and being able to do that kind of stuff.</p>
      <p begin="00:58:09.020" end="00:58:31.340">Anything else yes.</p>
      <p begin="00:58:31.340" end="00:58:36.990">...so, the question was if I want to...deed wooed do my clients need</p>
      <p begin="00:58:36.990" end="00:58:41.980">to using intel processors and the answer is no cindy is</p>
      <p begin="00:58:41.980" end="00:58:48.180">a available fairly broadly I think it's called neon on arm but,</p>
      <p begin="00:58:48.180" end="00:58:51.740">the goal of the cindy proposal that's getting added to languages</p>
      <p begin="00:58:51.740" end="00:58:57.690">to actually target the sort of most common types so,</p>
      <p begin="00:58:57.690" end="00:59:02.690">for example, ...on some architectures might even have five hundred twelve bit</p>
      <p begin="00:59:02.690" end="00:59:07.110">vectors that's not going to be for the web platform the web platforms only going to have</p>
      <p begin="00:59:07.110" end="00:59:11.180">the really common probably...thirty-two x four and in thirty-two</p>
      <p begin="00:59:11.180" end="00:59:16.950">x for vectors to make sure that if developers use it</p>
      <p begin="00:59:16.950" end="00:59:20.160">...likely going to be able to take advantage of that optimization</p>
      <p begin="00:59:20.160" end="00:59:26.520">...their clients machines and, I imagine if you're running the same</p>
      <p begin="00:59:26.520" end="00:59:30.940">...code on a architecture that doesn't supports indeed then legit is just going to</p>
      <p begin="00:59:30.940" end="00:59:34.850">admit slow code and actually do the do the simple thing of</p>
      <p begin="00:59:34.850" end="00:59:39.380">adding each one individually rather than relying on simply the developer won't</p>
      <p begin="00:59:39.380" end="00:59:54.230">have to have to query to see whether symbian supported before...</p>
      <p begin="00:59:54.230" end="00:59:59.050">All right well thanks everyone thanks-a-lot for coming hopefully learned a lot of</p>
      <p begin="00:59:59.050" end="01:00:04.110">the I'll be around so definitely just walk up to me and ask questions and happy to talk about this stuff.</p>

    </div>
  </body>
</tt>